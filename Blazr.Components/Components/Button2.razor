@implements IHandleEvent
@implements IHandleAfterRender

<div class="border border-2 border-dark bg-light p-2">
    <button class="btn btn-sm @Colour" @onclick=this.Clicked>@this.ChildContent</button>
    <span>Rendered at @DateTime.Now.ToLongTimeString()</span>
</div>

@code {
    private bool _isInitialized = false;
    private ChangeData _changeData = new ChangeData();

    [Parameter] public Guid RecordId { get; set; }
    [Parameter] public string Colour { get; set; } = "btn-secondary";
    [Parameter] public EventCallback<Guid> OnClick { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private record ChangeData
    {
        public Guid RecordId { get; init; }
        public string Colour { get; init; } = string.Empty;
    }

    private void Clicked()
        => this.OnClick.InvokeAsync(RecordId);

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        // Assign the parameters
        parameters.SetParameterProperties(this);
        // Check if the significant parameters have changed
        var shouldRender = ShouldRenderOnParameterChange();
        // call the base which triggers the component lifecycle stuff with an empty set of parameters.
        if (shouldRender)
            await base.SetParametersAsync(ParameterView.Empty);

        _isInitialized = true;
    }

    protected bool ShouldRenderOnParameterChange()
    {
        var data = new ChangeData { RecordId = this.RecordId, Colour = this.Colour };
        var changed = data != _changeData;
        _changeData = data;
        return changed;
    }

    Task IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, object? arg)
        => callback.InvokeAsync(arg);

    Task IHandleAfterRender.OnAfterRenderAsync()
        => Task.CompletedTask;

}
