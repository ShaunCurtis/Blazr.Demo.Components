@page "/EditForm"
@inject NavigationManager NavManager

<PageTitle>Edit</PageTitle>

<h3>EditForm</h3>

<form>
    @if (RecordEditContext is not null)
    {
            <div class="mb-3">
            <label class="form-label)">Date</label>
            <input class="form-control" type="date" @bind-value=RecordEditContext.Date />
        </div>
        <div class="mb-3">
            <label class="form-label">Temperature &deg;C</label>
            <input class="form-control" type="number" @bind-value=RecordEditContext.TemperatureC />
        </div>
        <div class="mb-3 form-label">
            <label class="form-label">Summary</label>
            <input class="form-control" type="text" @bind-value=RecordEditContext.Summary />
       </div>
        <div class="mb-3 text-end">
            <button disabled="@(!RecordEditContext.IsDirty)" class="btn btn-primary" @onclick=Save>Save</button>
            <button class="btn @this.ExitButtonColour" @onclick=Exit>@this.ExitButtonText</button>
        </div>
    }
</form>

@code {
    private WeatherForecastEditContext RecordEditContext = default!;
    private WeatherForecast weatherForecast = new WeatherForecast();

    private string ExitButtonColour
        => this.RecordEditContext.IsDirty
            ? "btn-danger"
            : "btn-dark";

    private string ExitButtonText
        => this.RecordEditContext.IsDirty
            ? "Exit without Save"
            : "Exit";

    protected override async Task OnInitializedAsync()
    {
        //get weather forecast from data pipeline
        await Task.Delay(1);
        RecordEditContext = new WeatherForecastEditContext(weatherForecast);
    }

    private async Task Save()
    {
        await Task.Delay(1);
    }

    private void Exit()
        => this.NavManager.NavigateTo("/");
}
