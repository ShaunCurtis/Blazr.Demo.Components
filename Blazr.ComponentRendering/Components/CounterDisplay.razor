@implements IDisposable
@inject CounterState counterData
<div class="bg-secondary text-white m-1 mb-0 p-1">
    <h5>@this.Title</h5>
    <div>Counter : @data.Counter </div>
</div>
<div class="bg-dark text-white p-1 m-1 mt-0">
    Parameter Set Time : @this.ParameterSetTime  -  Rendered at : @this.RenderTime
</div>


@code {
    [Parameter] public CounterData? Data { get; set; }
    [Parameter] public string Title { get; set; } = "Counter Display";

    CounterData data => Data ?? counterData.AsRecord();

    protected override void OnInitialized()
    {
        if (this.Data is null)
            counterData.StateUpdated += this.OnCounterChanged;
    }

    protected override Task OnInitializedAsync()
        => Task.Delay(1);

    private string ParameterSetTime = string.Empty;
    private string RenderTime = string.Empty;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        this.ParameterSetTime = DateTime.Now.ToLongTimeString();
        return base.SetParametersAsync(ParameterView.Empty);
    }

    protected override bool ShouldRender()
    {
        this.RenderTime = DateTime.Now.ToLongTimeString();
        return true;
    }

    private void OnCounterChanged(object? sender, bool state)
        => InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        if (this.Data is null)
            counterData.StateUpdated += this.OnCounterChanged;
    }
}
