<div class="bg-secondary text-white m-1 mb-0 p-1">
    <h5>Counter Display</h5>
    <div>Counter : @this.Data.Counter </div>
</div>
<div class="bg-dark text-white p-1 m-1 mt-0">
    Parameter Set Time : @this.ParameterSetTime  -  Rendered at : @this.RenderTime
</div>


@code {
    [Parameter, EditorRequired] public CounterData Data { get; set; } = new(Counter: 0);

    private string ParameterSetTime = string.Empty;
    private string RenderTime = string.Empty;
    private CounterData? _data;

    protected override Task OnInitializedAsync()
        => Task.Delay(1);

    public override Task SetParametersAsync(ParameterView parameters)
    {
        bool changeTrip = false;

        if (HasChanged(parameters, ref _data, ref changeTrip, "Data"))
            this.Data = _data ?? new(Counter: 0);

        if (!changeTrip)
            return Task.CompletedTask;

        this.ParameterSetTime = DateTime.Now.ToLongTimeString();
        return base.SetParametersAsync(ParameterView.Empty);
    }

    protected override bool ShouldRender()
    {
        this.RenderTime = DateTime.Now.ToLongTimeString();
        return true;
    }

    private static bool HasChanged<TType>(ParameterView parameters, ref TType? currentvalue, ref bool trip, string name)
    {
        var haveValue = parameters.TryGetValue<TType>(name, out TType? value);

        if (!haveValue)
            return false;

        var changed = !value?.Equals(currentvalue) ?? currentvalue is not null;

        if (!changed)
            return false;

        currentvalue = value;
        trip = true;
        return true;
    }
}
